        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:#include <time.h>
        -:   10:
        6:   11:int main(int argc, char** argv) {
        -:   12:
        -:   13:	//Random test for card Adventurer
        6:   14:	srand(time(NULL));
        -:   15:
        -:   16:	struct gameState testGame;
        -:   17:
        6:   18:	int numTests = 1000;
        -:   19:	int i;
        6:   20:	int errCount = 0;
        -:   21:	int origNumHand, origNumDeck;
        -:   22:	int card1, card2;
        -:   23:	//int player = 0;	
        -:   24:
        -:   25:	int k[10] = { adventurer, gardens, council_room, village, minion, mine, cutpurse,
        6:   26:		sea_hag, great_hall, smithy };
        -:   27:
        -:   28:	int choice1;
        -:   29:	int choice2;
        -:   30:	int choice3;
        -:   31:	int handPos;
        -:   32:	int bonus;	
        -:   33:	
        -:   34:
     6006:   35:	for (i = 0; i < numTests; i++) {
        -:   36:		
     6000:   37:		initializeGame(2, k, 3, &testGame);
     6000:   38:		testGame.deckCount[0] = rand() % 50;
     6000:   39:		testGame.handCount[0] = rand() & 50;
        -:   40:
     6000:   41:		origNumHand = testGame.handCount[0];
        -:   42:		//origNumDeck = testGame.deckCount[0];
        -:   43:		
     6000:   44:		choice1 = rand() % 50;
     6000:   45:		choice2 = rand() % 50;
     6000:   46:		choice3 = rand() % 50;
     6000:   47:		handPos = rand() % MAX_HAND;
     6000:   48:		bonus =  rand() % 50;
        -:   49:	
     6000:   50:		cardEffect(adventurer, choice1, choice2, choice3, &testGame, handPos, &bonus);
        -:   51:
     6000:   52:		if (testGame.handCount[0] != origNumHand + 2) {
        -:   53:		//	printf("TEST FAILED: Did not draw correct amount of cards");
     5844:   54:			errCount++;
        -:   55:		}
     6000:   56:		card1 = testGame.hand[0][testGame.handCount[0]] - 1;
     6000:   57:		if (card1 != copper && card1 != silver && card1 != gold) {
        -:   58:			//printf("TEST FAILED: Did not draw correct card type");
     6000:   59:			errCount++;
        -:   60:		}
        -:   61:	
     6000:   62:		card2 = testGame.hand[0][testGame.handCount[0]] - 2;
     6000:   63:		if (card2 != copper && card1 != silver && card1 != gold) {
        -:   64:			//printf("TEST FAILED: Did not draw correct card type");
     6000:   65:			errCount++;
        -:   66:		}
        -:   67:
        -:   68:		}
        6:   69:	printf("TEST COMPLETE, FOUND %d ERRORS\n", errCount);
        -:   70:	
        6:   71:	return 0;
        -:   72:}
